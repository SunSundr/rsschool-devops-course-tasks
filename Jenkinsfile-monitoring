pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: helm
    image: alpine/helm:3.12.0
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  - name: kubectl
    image: bitnami/kubectl:1.28
    command:
    - cat
    tty: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['install', 'upgrade', 'uninstall'],
            description: 'Action to perform'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['minikube', 'cloud'],
            description: 'Target environment'
        )
        booleanParam(
            name: 'INSTALL_PROMETHEUS',
            defaultValue: true,
            description: 'Install Prometheus monitoring stack'
        )
        booleanParam(
            name: 'INSTALL_GRAFANA',
            defaultValue: true,
            description: 'Install Grafana with SMTP configuration'
        )
        booleanParam(
            name: 'SETUP_ALERTS',
            defaultValue: true,
            description: 'Configure alert rules and contact points'
        )
    }
    
    environment {
        KUBECONFIG = credentials('kubeconfig')
        GRAFANA_ADMIN_USER = credentials('grafana-admin-user')
        GRAFANA_ADMIN_PASSWORD = credentials('grafana-admin-password')
        SMTP_HOST = credentials('smtp-host')
        SMTP_PORT = credentials('smtp-port')
        SMTP_USER = credentials('smtp-user')
        SMTP_PASSWORD = credentials('smtp-password')
        SMTP_FROM_ADDRESS = credentials('smtp-from-address')
        SMTP_FROM_NAME = credentials('smtp-from-name')
    }
    
    stages {
        stage('Prepare Environment') {
            steps {
                container('kubectl') {
                    script {
                        echo "Setting up environment for ${params.ENVIRONMENT}"
                        
                        sh '''
                            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
                        '''
                        
                        sh '''
                            kubectl create secret generic grafana-admin-secret \
                                --from-literal=username="$GRAFANA_ADMIN_USER" \
                                --from-literal=password="$GRAFANA_ADMIN_PASSWORD" \
                                --namespace monitoring \
                                --dry-run=client -o yaml | kubectl apply -f -
                        '''
                    }
                }
            }
        }
        
        stage('Install Prometheus') {
            when {
                allOf {
                    anyOf {
                        expression { params.ACTION == 'install' }
                        expression { params.ACTION == 'upgrade' }
                    }
                    expression { params.INSTALL_PROMETHEUS == true }
                }
            }
            steps {
                container('helm') {
                    script {
                        echo "Installing Prometheus monitoring stack..."
                        
                        sh '''
                            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                            helm repo update
                            
                            helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
                                --namespace monitoring \
                                --values k8s/prometheus/${ENVIRONMENT}/values-${ENVIRONMENT}-stack.yaml \
                                --wait \
                                --timeout=600s
                        '''
                        
                        sh '''
                            kubectl apply -f - <<EOF
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: flask-app-monitor
  namespace: monitoring
  labels:
    app: flask-app
spec:
  selector:
    matchLabels:
      app: flask-app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
  namespaceSelector:
    matchNames:
    - flask-app
EOF
                        '''
                    }
                }
            }
        }
        
        stage('Install Grafana') {
            when {
                allOf {
                    anyOf {
                        expression { params.ACTION == 'install' }
                        expression { params.ACTION == 'upgrade' }
                    }
                    expression { params.INSTALL_GRAFANA == true }
                }
            }
            steps {
                container('helm') {
                    script {
                        echo "Installing Grafana with SMTP configuration..."
                        
                        sh '''
                            helm repo add bitnami https://charts.bitnami.com/bitnami
                            helm repo update
                            
                            PROM_SERVICE=$(kubectl get svc -n monitoring | grep prometheus | grep -v operator | grep -v node-exporter | awk '{print $1}' | head -1)
                            echo "Found Prometheus service: $PROM_SERVICE"
                            
                            kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: grafana-datasources
  namespace: monitoring
type: Opaque
stringData:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://$PROM_SERVICE.monitoring.svc.cluster.local:9090
      isDefault: true
      editable: true
EOF
                            
                            helm upgrade --install grafana bitnami/grafana \
                                --namespace monitoring \
                                --set admin.existingSecret=grafana-admin-secret \
                                --set admin.userKey=username \
                                --set admin.passwordKey=password \
                                --set smtp.enabled=true \
                                --set smtp.host="$SMTP_HOST:$SMTP_PORT" \
                                --set smtp.user="$SMTP_USER" \
                                --set smtp.password="$SMTP_PASSWORD" \
                                --set smtp.fromAddress="$SMTP_FROM_ADDRESS" \
                                --set smtp.fromName="$SMTP_FROM_NAME" \
                                --set smtp.skipVerify=true \
                                --set datasources.secretName=grafana-datasources \
                                --values k8s/grafana/${ENVIRONMENT}/values-${ENVIRONMENT}.yaml \
                                --wait \
                                --timeout=600s
                        '''
                    }
                }
            }
        }
        
        stage('Setup Alert Rules') {
            when {
                allOf {
                    anyOf {
                        expression { params.ACTION == 'install' }
                        expression { params.ACTION == 'upgrade' }
                    }
                    expression { params.SETUP_ALERTS == true }
                    expression { params.INSTALL_GRAFANA == true }
                }
            }
            steps {
                container('kubectl') {
                    script {
                        echo "Setting up Grafana alert rules and contact points..."
                        
                        sh '''
                            kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s
                            
                            kubectl port-forward svc/grafana 3000:3000 -n monitoring &
                            GRAFANA_PF_PID=$!
                            sleep 10
                            
                            PROMETHEUS_DATASOURCE_UID=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                                http://localhost:3000/api/datasources | python3 -c "
import json, sys
datasources = json.load(sys.stdin)
for ds in datasources:
    if ds.get('type') == 'prometheus':
        print(ds.get('uid'))
        break
else:
    print('-')
")
                            
                            echo "Using Prometheus datasource UID: $PROMETHEUS_DATASOURCE_UID"
                            
                            curl -X POST \
                                -H "Content-Type: application/json" \
                                -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                                -d '{"title":"alerts","uid":"alerts"}' \
                                http://localhost:3000/api/folders || echo "Folder exists"
                            
                            curl -X POST \
                                -H "Content-Type: application/json" \
                                -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                                -d "{
                                    \\"name\\": \\"email-alerts\\",
                                    \\"type\\": \\"email\\",
                                    \\"settings\\": {
                                        \\"addresses\\": \\"$SMTP_USER\\"
                                    }
                                }" \
                                http://localhost:3000/api/v1/provisioning/contact-points || echo "Contact point exists"
                            
                            curl -X PUT \
                                -H "Content-Type: application/json" \
                                -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                                -d '{
                                    "receiver": "email-alerts",
                                    "group_by": ["alertname"],
                                    "group_wait": "10s",
                                    "group_interval": "10s",
                                    "repeat_interval": "1h",
                                    "routes": []
                                }' \
                                http://localhost:3000/api/v1/provisioning/policies
                            
                            curl -X POST \
                                -H "Content-Type: application/json" \
                                -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                                -d "{
                                    \\"folderUID\\": \\"alerts\\",
                                    \\"ruleGroup\\": \\"kubernetes-alerts\\",
                                    \\"title\\": \\"High CPU Usage\\",
                                    \\"condition\\": \\"B\\",
                                    \\"data\\": [
                                        {
                                            \\"refId\\": \\"A\\",
                                            \\"queryType\\": \\"\\",
                                            \\"relativeTimeRange\\": {
                                                \\"from\\": 300,
                                                \\"to\\": 0
                                            },
                                            \\"datasourceUid\\": \\"$PROMETHEUS_DATASOURCE_UID\\",
                                            \\"model\\": {
                                                \\"expr\\": \\"avg(1 - rate(node_cpu_seconds_total{mode=\\\\\\\"idle\\\\\\\"}[5m])) * 100\\",
                                                \\"instant\\": false,
                                                \\"range\\": true,
                                                \\"refId\\": \\"A\\"
                                            }
                                        },
                                        {
                                            \\"refId\\": \\"B\\",
                                            \\"queryType\\": \\"\\",
                                            \\"datasourceUid\\": \\"__expr__\\",
                                            \\"model\\": {
                                                \\"conditions\\": [
                                                    {
                                                        \\"evaluator\\": {
                                                            \\"params\\": [80],
                                                            \\"type\\": \\"gt\\"
                                                        },
                                                        \\"operator\\": {
                                                            \\"type\\": \\"and\\"
                                                        },
                                                        \\"query\\": {
                                                            \\"params\\": [\\"A\\"]
                                                        },
                                                        \\"reducer\\": {
                                                            \\"params\\": [],
                                                            \\"type\\": \\"last\\"
                                                        },
                                                        \\"type\\": \\"query\\"
                                                    }
                                                ],
                                                \\"type\\": \\"classic_conditions\\"
                                            }
                                        }
                                    ],
                                    \\"noDataState\\": \\"NoData\\",
                                    \\"execErrState\\": \\"Alerting\\",
                                    \\"for\\": \\"5m\\",
                                    \\"annotations\\": {
                                        \\"description\\": \\"CPU usage is above 80% for more than 5 minutes\\",
                                        \\"summary\\": \\"High CPU usage detected\\"
                                    },
                                    \\"labels\\": {
                                        \\"severity\\": \\"warning\\"
                                    }
                                }" \
                                http://localhost:3000/api/v1/provisioning/alert-rules
                            
                            curl -X POST \
                                -H "Content-Type: application/json" \
                                -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                                -d "{
                                    \\"folderUID\\": \\"alerts\\",
                                    \\"ruleGroup\\": \\"kubernetes-alerts\\",
                                    \\"title\\": \\"High Memory Usage\\",
                                    \\"condition\\": \\"B\\",
                                    \\"data\\": [
                                        {
                                            \\"refId\\": \\"A\\",
                                            \\"queryType\\": \\"\\",
                                            \\"relativeTimeRange\\": {
                                                \\"from\\": 300,
                                                \\"to\\": 0
                                            },
                                            \\"datasourceUid\\": \\"$PROMETHEUS_DATASOURCE_UID\\",
                                            \\"model\\": {
                                                \\"expr\\": \\"(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100\\",
                                                \\"instant\\": false,
                                                \\"range\\": true,
                                                \\"refId\\": \\"A\\"
                                            }
                                        },
                                        {
                                            \\"refId\\": \\"B\\",
                                            \\"queryType\\": \\"\\",
                                            \\"datasourceUid\\": \\"__expr__\\",
                                            \\"model\\": {
                                                \\"conditions\\": [
                                                    {
                                                        \\"evaluator\\": {
                                                            \\"params\\": [85],
                                                            \\"type\\": \\"gt\\"
                                                        },
                                                        \\"operator\\": {
                                                            \\"type\\": \\"and\\"
                                                        },
                                                        \\"query\\": {
                                                            \\"params\\": [\\"A\\"]
                                                        },
                                                        \\"reducer\\": {
                                                            \\"params\\": [],
                                                            \\"type\\": \\"last\\"
                                                        },
                                                        \\"type\\": \\"query\\"
                                                    }
                                                ],
                                                \\"type\\": \\"classic_conditions\\"
                                            }
                                        }
                                    ],
                                    \\"noDataState\\": \\"NoData\\",
                                    \\"execErrState\\": \\"Alerting\\",
                                    \\"for\\": \\"5m\\",
                                    \\"annotations\\": {
                                        \\"description\\": \\"Memory usage is above 85% for more than 5 minutes\\",
                                        \\"summary\\": \\"High memory usage detected\\"
                                    },
                                    \\"labels\\": {
                                        \\"severity\\": \\"warning\\"
                                    }
                                }" \
                                http://localhost:3000/api/v1/provisioning/alert-rules
                            
                            kill $GRAFANA_PF_PID || true
                        '''
                    }
                }
            }
        }
        
        stage('Uninstall') {
            when {
                expression { params.ACTION == 'uninstall' }
            }
            steps {
                container('helm') {
                    script {
                        echo "Uninstalling monitoring components..."
                        
                        sh '''
                            helm uninstall grafana -n monitoring || echo "Grafana not found"
                            helm uninstall prometheus-stack -n monitoring || echo "Prometheus not found"
                            kubectl delete secret grafana-admin-secret grafana-datasources -n monitoring || echo "Secrets not found"
                            kubectl delete servicemonitor flask-app-monitor -n monitoring || echo "ServiceMonitor not found"
                        '''
                    }
                }
            }
        }
        
        stage('Verify Installation') {
            when {
                anyOf {
                    expression { params.ACTION == 'install' }
                    expression { params.ACTION == 'upgrade' }
                }
            }
            steps {
                container('kubectl') {
                    script {
                        echo "Verifying monitoring installation..."
                        
                        sh '''
                            echo "=== Monitoring Pods ==="
                            kubectl get pods -n monitoring
                            
                            echo "=== Services ==="
                            kubectl get svc -n monitoring
                            
                            echo "=== ServiceMonitors ==="
                            kubectl get servicemonitor -n monitoring || echo "No ServiceMonitors found"
                            
                            echo "=== Secrets ==="
                            kubectl get secrets -n monitoring | grep -E "grafana|prometheus" || echo "No monitoring secrets found"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline completed with status: ${currentBuild.result ?: 'SUCCESS'}"
            }
        }
        success {
            script {
                if (params.ACTION == 'install' || params.ACTION == 'upgrade') {
                    echo """
Monitoring stack deployed successfully!

Access instructions:
- Prometheus: kubectl port-forward svc/prometheus-kube-prometheus-stack-prometheus 9090:9090 -n monitoring
- Grafana: kubectl port-forward svc/grafana 3000:3000 -n monitoring
- Login: ${env.GRAFANA_ADMIN_USER} / [password from credentials]

Next steps:
1. Import dashboards from k8s/grafana/${params.ENVIRONMENT}/
2. Verify alert rules in Grafana UI
3. Test email notifications
"""
                }
            }
        }
        failure {
            script {
                echo "Pipeline failed. Check logs for details."
                echo "Common issues: KUBECONFIG access, missing credentials, network connectivity"
            }
        }
    }
}